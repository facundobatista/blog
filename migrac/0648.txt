2014-05-23 04:03:32
Un testrunner a todo vapor
<tags>

En <a href="http://www.taniquetil.com.ar/plog/post/1/642">este post</a> detallé todo lo que querría tener en el testrunner ideal, con la idea de trabajar un poco sobre eso en <a href="http://www.taniquetil.com.ar/plog/post/1/644">el último PyCamp</a>.

Así fue. Nos sentamos un rato largo con Martín Gaitán y empezamos a ver si con <a href="https://nose.readthedocs.org/en/latest/">nosetest</a> podíamos lograr parte o todo de lo que queremos.

Algo en lo que no nos metimos mucho es la integración de nosetests con frameworks que proveen un reactor (o main loop). Buscando un poco ví que hay algo para integrarlo con Twisted, bastante sencillo, pero no encontré nada para GTK o Qt... no sé si porque no se puede, o es automático :p

Entonces, vayamos a los bifes... ¿qué necesitamos para tener el testrunner ideal?

<img src="http://www.taniquetil.com.ar/facundo/imgs/keeptesting.png" alt="Keep testing" height="184" width="600" />


<strong>Los componentes</strong>

El primer paso, obvio, es instalar el <span style="font-family: courier new,courier;">nosetests</span> base. Con esto tenemos el primer par de puntos de lo que queríamos en mi post original: que soporte recibir un directorio y que busque de ahí para abajo, y que al recibir un archivo que corra los tests de ese archivo.

El primer plugin que necesitamos para ir a donde queremos es "nose-progressive". Este es un plugin que nos cambia bastante la forma de ver los resultados de los tests. Por ejemplo, no hace falta que muestre cada linea de cada test ejecutado, en jerarquía, porque ante un error nos va a dar un pequeño resumen donde podemos ver la info del test que falló.

También nos va a dar un lindo OK en verde si todo salió bien... y si hubieron problemas vamos a ver esos resúmenes, coloridos, con un montón de info copada.

De la info que nos da en ese resumen también podemos extraer el path para correr el test sólo, o toda la clase, todo el archivo etc. Pero también tenemos otro plugin, el "nosecomplete" que hace que podamos ir escribiendo el path para un test, autocompletando de una forma muy piola, descubriendo lo que hay para correr.

Para correr más de un test, un subconjunto que matchee con una regex, tenemos el "nose-selecttests", que nos permite pasarle un <span style="font-family: courier new,courier;">--select-tests=</span> que hace que le podamos pasar luego aquello que queremos que coincida.

Finalmente, tenemos varios detalles. Le podemos decir que corte en el primer test que falla, y que no siga, con -<span style="font-family: courier new,courier;">x</span>. También podemos pedirle que no esconda ni los prints que hagamos ni lo que logueamos, con <span style="font-family: courier new,courier;">--nocapture</span> y <span style="font-family: courier new,courier;">--nologcapture</span>. Y le podemos pedir que nos tire un buen resumen de cuales tests tardan más con <span style="font-family: courier new,courier;">--with-timer</span> (necesitamos el plugin "nose-timer").


<strong>Armando el entorno</strong>

Lo primero, obviamente en el virtualenv de tu proyecto, es instalar nose y todos sus plugins:

<span style="font-family: courier new,courier;">&nbsp; pip install nose nose-progressive nose-selecttests nose-timer nosecomplete</span>

Para el plugin de autocomplete, como autocompletamos desde el shell, realmente, tenemos que hookear al mismo con el plugin de nose. Es copiar y pegar algo, nada más, las instrucciones <a href="https://github.com/alonho/nosecomplete">acá</a>.

Finalmente, hay que decirle a nose, cuando lo ejecutamos, que use tal o cual plugin, y de qué forma. Acá viene mezclada la mano... algunas configs la podemos poner en el el <span style="font-family: courier new,courier;">$HOME/.noserc</span>...

<span style="font-family: courier new,courier;">&nbsp; [nosetests]</span>
<span style="font-family: courier new,courier;">&nbsp; with-progressive=1</span>
<span style="font-family: courier new,courier;">&nbsp; nologcapture=1</span>
<span style="font-family: courier new,courier;">&nbsp; verbose=1</span>

..., pero otras las tenemos que especificar al ejecutarlo:

<span style="font-family: courier new,courier;">&nbsp; nosetests --progressive-bar-filled=2 --progressive-function-color=1 --progressive-dim-color=5</span>

Esto último se podría meter como un <em>alias</em> del bash, o simplemente encapsularlo en un script 'test' en el proyecto (junto con algún pyflakes o pylint, etc).

En fin. Lo importante es: Keep Testing :)
<strong></strong></p> |
