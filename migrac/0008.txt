2004-10-25 10:40:44
¿Referencia o valor?
<tags>


Python, a decir verdad, ¡no pasa los objetos!. Los objetos están en
memoria, y lo que se hace es reasignarles un nombre.

Por ejemplo::

1  def func(a):</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">2      print a</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">3  </span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">4  b = "blah"</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">5  print b</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">6  func(b)</span>

En la línea 4 se crea un objeto en memoria, tipo string, y con un contenido determinado. A este objeto se lo relaciona con el nombre "b". A partir de ese momento, cuando hablemos de "b" en este espacio de nombres, estaremos haciendo referencia a ese objeto en memoria (que es lo que hacemos justamente en la linea 5).

En la linea 6, llamamos a una función, con el nombre "b" como primer parámetro. Seg&uacute;n la definición de la función, llamaremos "a" al primer parámetro. Dentro del espacio de nombres de esa función, cada vez que usemos el nombre "a", nos referiremos al mismo string que indicamos antes, al mismo objeto en memoria.

Resumiendo, el objeto no se copia, y no se pasa un puntero al mismo, simplemente se le asigna otro nombre en otro espacio de nombres.

<span style="font-family: courier new,courier,monospace">&gt;&gt; def f(a):</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">    print id(a)</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">    </span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">&gt;&gt;&gt; b = 5</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">&gt;&gt;&gt; id(5)</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">9065408</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">&gt;&gt;&gt; f(b)</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">9065408</span><br style="font-family: courier new,courier,monospace" />
Pensarlo de esta forma (que es lo que realmente sucede) nos simplifica la vida cuando tenemos distintos comportamientos con los objetos mutables e inmutables. Por ejemplo:

<span style="font-family: courier new,courier,monospace">&gt;&gt;&gt; def f(a,b):</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">    print id(a), id(b)</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">    a = 7778</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">    b.append(&#39;?&#39;)</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">    print id(a), id(b)</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">    </span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">&gt;&gt;&gt; c = 56</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">&gt;&gt;&gt; d = [&#39;pp&#39;, 11]</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">&gt;&gt;&gt; c, d</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">(56, [&#39;pp&#39;, 11])</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">&gt;&gt;&gt; id(c), id(d)</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">(9064796, 11094976)</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">&gt;&gt;&gt; f(c,d)</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">9064796 11094976</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">10047164 11094976</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">&gt;&gt;&gt; c, d</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">(56, [&#39;pp&#39;, 11, &#39;?&#39;])</span><br style="font-family: courier new,courier,monospace" /><span style="font-family: courier new,courier,monospace">&gt;&gt;&gt; </span><br style="font-family: courier new,courier,monospace" />
Como vemos, al comienzo de la función, "a" apunta al mismo objeto que "c" fuera de la función, y lo mismo sucede con "b" y "d".

Y aquí es donde paga no pensar como "variables clásicas": en la primer linea NO estamos modificando una variable "a", sino que llamamos "a" a otro objeto en memoria, que no tiene nada que ver con el anterior. El nombre "b", en cambio, no es reasignado a otro objeto. Al final de la función vemos lo que acabo de explicar: "a" apunta a otro objeto en memoria y "b" todavía al mismo.

Cuando volvemos al cuerpo principal de la función encontramos que el objeto al que apunta "c" sigue estando igual (nunca se modificó), y el objeto al que apuntamos con el nombre "b" sí sufrió una modificación.

Hay un excelente <a href="http://starship.python.net/crew/mwh/hacks/objectthink.html">artículo</a> de Alex Martelli sobre este asunto, gentilmente <a href="http://blog.foffani.org/2007/04/cmo-pensar-como-un-pythonista.html">traducido</a> por Hernán Martínez Foffani.[@more@] |
