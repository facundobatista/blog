2017-10-09 18:20:23
Usando Go desde Python
<tags>



¿Alguna vez necesitaron usar un código de <a href="https://golang.org/">Go</a> desde <a href="http://python.org/">Python</a>? Yo sí, y acá cuento qué hice.

Antes que nada, un poco de background, para que el ejercicio no sea demasiado teórico: en el laburo tenemos que validar las licencias que se incluyen en el <a href="https://en.wikipedia.org/wiki/Snappy_(package_manager)">.snap</a>, y aunque el formato en que están sería estándar (<a href="https://spdx.org/licenses/">SPDX</a>), una condición de contorno es usar el mismo parser/validador que se usa en snapd, para estar 107% seguros que el comportamiento va a ser el mismo hasta en los corner cases o bugs.

El detalle es que <a href="https://github.com/snapcore/snapd">snapd</a> está escrito en Go, y el <a href="https://launchpad.net/software-center-agent">server</a> está escrito en Python. Entonces tengo que compilar ese código en Go y usarlo desde Python... de allí este post, claro.

Es más fácil de lo que parece, ya que el compilador de Go tiene la capacidad de buildear a "biblioteca compartida", y de ahí usarlo desde Python es casi trivial ("casi", porque tenemos que poner algo de código en C).

Para ser más claro, si queremos ejecutar "la lib de SPDX hecha en Go" desde nuestro Python, tenemos que poner dos componentes, que funcionan casi de adaptadores:
<ul>
<li>Un pequeño código en C para armar "como módulo" una funcioncita que recibe y entrega objetos Python, y hace la traducción al "mundo C" y llama a otra función en Go.</li>
<li>Un pequeño código en Go que traduce los parámetros desde C y llama a la biblioteca SPDX correspondiente.</li>
</ul>


<strong>Adaptador de Python a C</strong>

El archivo completo es <a href="http://www.taniquetil.com.ar/facundo/pygo/spdx.c">spdx.c</a>, paso a explicarlo haciendo antes la aclaración que es para Python 2 (que es lo que tenemos hoy en ese servicio), pero si fuera para Python 3 sería muy parecido (la idea es la misma, cambian algunos nombres, <a href="https://docs.python.org/3/extending/extending.html">revisen acá</a>).

Antes que nada, incluir la lib de Python

<span style="font-family: courier new,courier;">    #include <Python.h></span>

Vamos a llamar a una función de Go, necesitamos explicitar lo que va recibir (una cadena de bytes, que a nivel de C es un puntero a chars)  y lo que nos devuelve (un número, que interpretaremos como bool).

<span style="font-family: courier new,courier;">    long IsValid(char *);</span>

Definimos la función que vamos a llamar desde Python... es sencilla porque es genérica, recibe self y argumentos, devuelve un objeto Python:

<span style="font-family: courier new,courier;">    static PyObject *</span>
<span style="font-family: courier new,courier;">    is_valid(PyObject *self, PyObject *args)</span>

El cuerpo de la función es sencillo también. Primero definimos 'source' (el string con la licencia a validar) y 'res' (el resultado), luego llamamos a <span style="font-family: courier new,courier;">PyArg_ParseTuple</span> que nos va a parsear 'args', buscando una cadena ('s') la cual va a poner en 'source' (y si algo sale mal nos vamos enseguida, para eso está el 'if' alrededor).

<span style="font-family: courier new,courier;">    {</span>
<span style="font-family: courier new,courier;">        char * source;</span>
<span style="font-family: courier new,courier;">        long res;</span>

<span style="font-family: courier new,courier;">        if (!PyArg_ParseTuple(args, "s", &amp;source))</span>
<span style="font-family: courier new,courier;">            return NULL;</span>

Finalmente llamamos a <span style="font-family: courier new,courier;">IsValid</span> (la función en Go), y a ese resultado lo convertimos en un objeto de Python tipo <span style="font-family: courier new,courier;">bool</span>, que es lo que realmente devolvemos:

<span style="font-family: courier new,courier;">        res = IsValid(source);</span>
<span style="font-family: courier new,courier;">        return PyBool_FromLong(res);</span>
<span style="font-family: courier new,courier;">    }</span>

Ahora que tenemos nuestra función útil, debemos meterla en un módulo, para lo cual tenemos que definir qué cosas van a haber en dicho módulo. Entonces, armamos la siguiente estructura, con dos lineas; la primera habla sobre nuestra función, la última es una marca en la estructura para que sepa que es el final.

<span style="font-family: courier new,courier;">    static PyMethodDef SPDXMethods[] = {</span>
<span style="font-family: courier new,courier;">        {"is_valid", is_valid, METH_VARARGS, "Check if the given license is valid."},</span>
<span style="font-family: courier new,courier;">        {NULL, NULL, 0, NULL}</span>
<span style="font-family: courier new,courier;">    };</span>

En la linea útil tenemos:
<ul>
<li>"is_valid": es el nombre de la función que vamos a usar desde afuera del módulo</li>
<li>is_valid: es una referencia a la función que tenemos definida arriba (para que sepa qué ejecutar cuando llamamos a "is_valid" desde afuera del módulo.</li>
<li>METH_VARARGS: la forma en que recibe los argumentos (fuertemente atado a como luego los parseamos con PyArg_ParseTuple arriba.</li>
<li>"Check ...": el docstring de la función.</li>
</ul>

Para terminar con este código, va el inicializador del módulo, con un nombre predeterminado ("init" + nombre del módulo), y la inicialización propiamente dicha, pasando el nombre del módulo y la estructura que acabamos de definir arriba:

<span style="font-family: courier new,courier;">    PyMODINIT_FUNC</span>
<span style="font-family: courier new,courier;">    initspdx(void)</span>
<span style="font-family: courier new,courier;">    {</span>
<span style="font-family: courier new,courier;">        (void) Py_InitModule("spdx", SPDXMethods);</span>
<span style="font-family: courier new,courier;">    }</span>


<strong>Adaptador de C a Go</strong>

El archivo completo es <a href="http://www.taniquetil.com.ar/facundo/pygo/spdxlib.go">spdxlib.go</a>.

Tenemos que meter el código en un paquete 'main'

<span style="font-family: courier new,courier;">    package main</span>

Importamos el código para SPDX de snapd (tienen que bajarlo antes con <span style="font-family: courier new,courier;">go get github.com/snapcore/snapd/spdx</span>):

<span style="font-family: courier new,courier;">    import "github.com/snapcore/snapd/spdx"</span>

Importamos adaptadores desde/a C, indicando que cuando buildeemos vamos a usarlo desde Python 2:

<span style="font-family: courier new,courier;">    // #cgo pkg-config: python2</span>
<span style="font-family: courier new,courier;">    import "C"</span>

La función propiamente dicha, donde indicamos que recibimos un puntero a char de C y vamos a devolver un bool:

<span style="font-family: courier new,courier;">    //export IsValid</span>
<span style="font-family: courier new,courier;">    func IsValid(license *C.char) bool {</span>

El cuerpo es nuevamente sencillo: llamamos al ValidateLicense de SPDX (convirtiendo primero la cadena a Go), y luego comparamos el resultado para saber si la licencia es válida o no:

<span style="font-family: courier new,courier;">        res := spdx.ValidateLicense(C.GoString(license))</span>
<span style="font-family: courier new,courier;">        if res == nil {</span>
<span style="font-family: courier new,courier;">            return true</span>
<span style="font-family: courier new,courier;">        } else {</span>
<span style="font-family: courier new,courier;">            return false</span>
<span style="font-family: courier new,courier;">        }</span>
<span style="font-family: courier new,courier;">    }</span>

Cerramos con la definición obligatoria de main:

<span style="font-family: courier new,courier;">    func main() {}</span>


<strong>Lo usamos</strong>

Primer paso, buildear (yo tengo Go 1.6, creo que necesitan 1.5 o superior para poder armar directamente la biblioteca compartida de C, pero no estoy seguro):

<span style="font-family: courier new,courier;">    go build -buildmode=c-shared -o spdx.so</span>

Segundo paso, profit!

<span style="font-family: courier new,courier;">    $ python2</span>
<span style="font-family: courier new,courier;">    >>> import spdx</span>
<span style="font-family: courier new,courier;">    >>> spdx.is_valid("GPL-3.0")</span>
<span style="font-family: courier new,courier;">    True</span> |
