2017-07-26 21:23:00
En tu cara, planeta redondo
<tags>



 Ejercicio de Python. El objetivo es tener una serie de timestamps, en función de un registro "tipo cron" que indique periodicidad, desde un punto de partida, hasta "ahora".

 El problema es que el "ahora" es de Buenos Aires, mientras que el servidor está en Holanda (o podría estar en cualquier lado).

 Lo resolvemos con <a href="https://pypi.python.org/pypi/pytz">pytz</a> y <a href="https://pypi.python.org/pypi/croniter">croniter</a>. Veamos...

 Arranquemos un intérprete interactivo dentro de un virtualenv con las dos libs que acabo de mencionar (y las importamos, además de datetime):

 <span style="font-family: courier new,courier;">    $ fades -d pytz -d croniter</span>
 <span style="font-family: courier new,courier;">    *** fades ***  2017-07-26 18:27:20,009  INFO     Hi! This is fades 6.0, automatically managing your dependencies</span>
 <span style="font-family: courier new,courier;">    *** fades ***  2017-07-26 18:27:20,009  INFO     Need to install a dependency with pip, but no builtin, doing it manually...</span>
 <span style="font-family: courier new,courier;">    *** fades ***  2017-07-26 18:27:22,979  INFO     Installing dependency: 'pytz'</span>
 <span style="font-family: courier new,courier;">    *** fades ***  2017-07-26 18:27:24,431  INFO     Installing dependency: 'croniter'</span>
 <span style="font-family: courier new,courier;">    Python 3.5.2 (default, Nov 17 2016, 17:05:23)</span>
 <span style="font-family: courier new,courier;">    [GCC 5.4.0 20160609] on linux</span>
 <span style="font-family: courier new,courier;">    Type "help", "copyright", "credits" or "license" for more information.</span>
 <span style="font-family: courier new,courier;">    >>> import croniter</span>
 <span style="font-family: courier new,courier;">    >>> import pytz</span>
 <span style="font-family: courier new,courier;">    >>> import datetime</span>

 Veamos que el server tiene horarios "complicados" (en el momento de hacer esto, acá en Buenos Aires son las 18:09):

 <span style="font-family: courier new,courier;">    >>> datetime.datetime.now()</span>
 <span style="font-family: courier new,courier;">    datetime.datetime(2017, 7, 26, 23, 9, 51, 476140)</span>
 <span style="font-family: courier new,courier;">    >>> datetime.datetime.utcnow()</span>
 <span style="font-family: courier new,courier;">    datetime.datetime(2017, 7, 26, 21, 9, 56, 707279)</span>

 Instanciemos croniter, indicando repeticiones todas las horas a las 20 (a propósito, de manera que cuando iteremos desde hace una semana hasta "ahora", debería llegar hasta ayer, porque ahora son las 18 y pico acá, pero justo UTC o la hora del server son más que las 20...):

 <span style="font-family: courier new,courier;">    >>> cron = croniter.croniter("0 20 * * * ", datetime.datetime(year=2017, month=7, day=20))</span>

 Pidamos la hora UTC actual, agregándole metadata de que es UTC, justamente:

 <span style="font-family: courier new,courier;">    >>> utc_now = pytz.utc.localize(datetime.datetime.utcnow())</span>
 <span style="font-family: courier new,courier;">    >>> utc_now</span>
 <span style="font-family: courier new,courier;">    datetime.datetime(2017, 7, 26, 21, 15, 27, 508732, tzinfo=<UTC>)</span>

 Pidamos un timezone para Buenos Aires, y el "ahora" de antes pero calculado para esta parte del planeta:

 <span style="font-family: courier new,courier;">    >>> bsas_tz = pytz.timezone("America/Buenos_Aires")</span>
 <span style="font-family: courier new,courier;">    >>> bsas_now = utc_now.astimezone(bsas_tz)</span>
 <span style="font-family: courier new,courier;">    >>> bsas_now</span>
 <span style="font-family: courier new,courier;">    datetime.datetime(2017, 7, 26, 18, 15, 27, 508732, tzinfo=<DstTzInfo 'America/Buenos_Aires' -03-1 day, 21:00:00 STD>)</span>

 Ahora hagamos un loop, pidiendo las fechas a <em>cron</em> y mostrándola, mientras que no sea más que ahora (notar que para compararla, hay que localizarla con el mismo timezone).

 <span style="font-family: courier new,courier;">    >>> while True:</span>
 <span style="font-family: courier new,courier;">    ...     next_ts = cron.get_next(datetime.datetime)</span>
 <span style="font-family: courier new,courier;">    ...     bsas_next_ts = bsas_tz.localize(next_ts)</span>
 <span style="font-family: courier new,courier;">    ...     if bsas_next_ts > bsas_now:</span>
 <span style="font-family: courier new,courier;">    ...         break</span>
 <span style="font-family: courier new,courier;">    ...     print(bsas_next_ts)</span>
 <span style="font-family: courier new,courier;">    ... </span>
 <span style="font-family: courier new,courier;">    2017-07-20 20:00:00-03:00</span>
 <span style="font-family: courier new,courier;">    2017-07-21 20:00:00-03:00</span>
 <span style="font-family: courier new,courier;">    2017-07-22 20:00:00-03:00</span>
 <span style="font-family: courier new,courier;">    2017-07-23 20:00:00-03:00</span>
 <span style="font-family: courier new,courier;">    2017-07-24 20:00:00-03:00</span>
 <span style="font-family: courier new,courier;">    2017-07-25 20:00:00-03:00</span>

 Vemos que tuvimos fechas arrancando el 20 de julio, y tenemos "varios días a las 20hs" hasta ayer, porque todavía no es "hoy a las 20hs". ¡Listo! |
